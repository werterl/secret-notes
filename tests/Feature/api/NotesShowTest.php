<?php

namespace Tests\Feature\api;

use App\Models\Note;
use App\Services\NoteService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Mockery;
use Mockery\MockInterface;
use Tests\TestCase;

class NotesShowTest extends TestCase
{
    use RefreshDatabase;
    protected Note $noteCreated;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->noteCreated = Note::factory()->create();
    }


    public function testNoteInfoSuccess(): void
    {
        $response = $this->get('/api/notes/'.$this->noteCreated->id.'/info');

        $response
            ->assertStatus(200)
            ->assertJson(
                ['expiration_date' => $this->noteCreated->expiration_date->toJson()]
            );
    }

    public function testNoteInfoIncorrectIdThrowError(): void
    {
        $response = $this->get('/api/notes/error-id/info');

        $response->assertStatus(404);
    }

    public function testNoteShowSuccess(): void
    {
        $this->instance(
            NoteService::class,
            Mockery::mock(NoteService::class, function (MockInterface $mock) {
                $mock
                    ->shouldReceive('openNote')
                    ->with(Note::class)
                    ->once();
            })
        );

        $response = $this->get('/api/notes/' . $this->noteCreated->id);

        $response
            ->assertStatus(200)
            ->assertJson($this->noteCreated->toArray());
    }

    public function testNoteShowIncorrectIdThrowError(): void
    {
        $response = $this->get('/api/notes/error-id');

        $response->assertStatus(404);
    }
}
